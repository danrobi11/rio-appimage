name: Build Rio Terminal Portable Binary

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential curl tar pkg-config zip unzip \
            git wget patchelf \
            rustc cargo \
            libxkbcommon-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev \
            libx11-dev libxcb1-dev libxkbcommon-x11-dev libwayland-dev \
            libfontconfig-dev fonts-dejavu-core mesa-utils

      - name: Download Rio Terminal nightly source
        run: |
          mkdir -p ~/rio-build
          cd ~/rio-build
          echo "Downloading nightly zip archive..."
          wget "https://github.com/raphamorim/rio/archive/refs/tags/nightly.zip" -O rio-nightly.zip || {
            echo "Error: Failed to download nightly zip archive."
            exit 1
          }
          if [ -f rio-nightly.zip ]; then
            unzip rio-nightly.zip
            mv rio-nightly rio-nightly-source
            ls -l
          else
            echo "Error: Downloaded zip file not found."
            exit 1
          fi

      - name: List repository tags for debugging
        run: |
          git ls-remote --tags https://github.com/raphamorim/rio.git | grep -o 'refs/tags/.*' | sed 's|refs/tags/||'

      - name: Patch sugarloaf for font fallback
        run: |
          cd ~/rio-build/rio-nightly-source
          echo 'pub const DEJAVU_SANS_MONO: &[u8] = include_bytes!("DejaVuSansMono.ttf");' >> sugarloaf/src/font/mod.rs
          cp /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf sugarloaf/src/font/
          sed -i 's/FontRef::from_index(\([^)]*\))\.unwrap()/FontRef::from_index(\1).unwrap_or_else(|| { eprintln!("Font not found, using bundled DejaVu Sans Mono"); FontRef::from_index(DEJAVU_SANS_MONO, 0).expect("Bundled DejaVu Sans Mono index missing") })/' sugarloaf/src/font/mod.rs || true
          echo "Applied font fallback patch"

      - name: Patch grid storage to prevent capacity overflow
        run: |
          cd ~/rio-build/rio-nightly-source
          sed -i 's|pub fn new(cols: usize, rows: usize) -> Self {|pub fn new(cols: usize, rows: usize) -> Self { let cols = cols.min(1024); let rows = rows.min(1024); let capacity = cols.checked_mul(rows).unwrap_or(1024 * 1024);|' rio-backend/src/crosswords/grid/storage.rs || true
          sed -i 's|Vec::with_capacity(cols \* rows)|Vec::with_capacity(capacity)|' rio-backend/src/crosswords/grid/storage.rs || true
          echo "Patched grid storage with safe capacity"

      - name: Build Rio Terminal
        run: |
          cd ~/rio-build/rio-nightly-source
          cargo build --release

      - name: Install Rio to staging directory
        run: |
          mkdir -p ~/rio-install/usr/bin
          cp ~/rio-build/rio-nightly-source/target/release/rio ~/rio-install/usr/bin/rio-bin

      - name: Bundle all shared library dependencies
        run: |
          cd ~/rio-install
          mkdir -p usr/lib
          chmod +w usr/bin/rio-bin
          ldd usr/bin/rio-bin | grep -o '/[^ ]*\.so[^ ]*' | sort -u | while read lib; do
            # Exclude libc.so.6 and ld-linux-x86-64.so.2
            if [[ "$lib" != *"/libc.so"* && "$lib" != *"/ld-linux-x86-64.so"* ]]; then
              cp -v "$lib" usr/lib/ || { echo "Error: Failed to copy $lib"; exit 1; }
            fi
          done
          cp -v /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 usr/lib/
          ls -l usr/lib/

      - name: Bundle font files and fontconfig config
        run: |
          cd ~/rio-install
          mkdir -p usr/share/fonts/truetype/dejavu
          cp -v /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf usr/share/fonts/truetype/dejavu/
          mkdir -p usr/etc/fonts
          cat > usr/etc/fonts/fonts.conf << EOF
          <?xml version="1.0"?>
          <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
          <fontconfig>
            <dir>\$DIR/../share/fonts</dir>
            <cachedir>\$DIR/../cache</cachedir>
          </fontconfig>
          EOFInstall Dependencies:
      - name: Create configuration file with font specification
        run: |
          cd ~/rio-install
          mkdir -p usr/config
          rm -f usr/config/config.toml
          cat > usr/config/config.toml << 'EOF'
          use-fork = false
          [fonts]
          regular = { family = "DejaVu Sans Mono", style = "Normal" }
          [cursor]
          shape = "block"
          blinking = false
          [colors]
          background = "#000000"
          foreground = "#00FFFF"
          cursor = "#00FF00"
          tabs = "#000000"Install Dependencies:
          tabs-active = "#00FF00"
          selection-foreground = "#00FFFF"
          selection-background = "#000000"
          black = "#000000"
          EOF
          chmod 644 usr/config/config.toml
          echo "Config contents after creation:"
          cat usr/config/config.toml

      - name: Create launcher script
        run: |
          cd ~/rio-install/usr/bin
          cat > rio << EOF
          #!/bin/bash
          DIR="\$(dirname Install Dependencies:"\$(realpath "\$0")")"
          export FONTCONFIG_FILE="\$DIR/../etc/fonts/fonts.conf"
          export FONTCONFIG_PATH="\$DIR/../etc/fonts"
          export LD_LIBRARY_PATH="\$DIR/../lib:/usr/lib:/lib"
          export LIBGL_DRIVERS_PATH="\$DIR/../lib/dri"
          export MESA_DEBUG=1
          export EGL_LOG_LEVEL=debug
          echo "Using FONTCONFIG_FILE: \$FONTCONFIG_FILE"
          echo "Using FONTCONFIG_PATH: \$FONTCONFIG_PATH"
          ls -l "\$FONTCONFIG_FILE" || echo "Fontconfig file not found!"
          fc-list | grep "DejaVu Sans Mono" || echo "DejaVu Sans Mono not found in fontconfig!"Install Dependencies:
          CONFIG="\$DIR/../config/config.toml"
          mkdir -p ~/.config/rio
          cp "\$CONFIG" ~/.config/rio/config.toml || { echo "Failed to copy config"; exit 1; }
          chmod 644 ~/.config/rio/config.toml
          echo "Using config: ~/.config/rio/config.toml"
          cat ~/.config/rio/config.toml
          echo "Bundled libraries:"
          ls -l "\$DIR/../lib/"
          echo "LD_LIBRARY_PATH: \$LD_LIBRARY_PATH"
          "\$DIR/rio-bin" "\$@" || { echo "Failed to run rio-bin"; exit 1; }
          echo "Rio closed. Checking ~/.config/rio/:"
          ls -ld ~/.config/rio/
          ls -l ~/.config/rio/config.toml
          EOF
          chmod +x rio
          cat rio

      - name: Create zip file with binary and libraries
        run: |
          cd ~/rio-install
          zip -r ~/rio-nightly-portable.zip .

      - name: Generate SHA256 checksum
        run: |
          sha256sum ~/rio-nightly-portable.zip > ~/rio-nightly-portable.zip.sha256
          cat ~/rio-nightly-portable.zip.sha256

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: rio-portable
          path: |
            ~/rio-nightly-portable.zip
            ~/rio-nightly-portable.zip.sha256
