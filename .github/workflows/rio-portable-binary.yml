name: Build Rio Terminal Portable Binary

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential curl tar pkg-config zip \
            git wget patchelf \
            rustc cargo \
            libxkbcommon-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev \
            libx11-dev libxcb1-dev libxkbcommon-x11-dev libwayland-dev \
            libfontconfig-dev fonts-dejavu-core

      - name: Download Rio Terminal v0.2.11 source
        run: |
          mkdir -p ~/rio-build
          cd ~/rio-build
          wget "https://github.com/raphamorim/rio/archive/refs/tags/v0.2.11.tar.gz" -O rio-0.2.11.tar.gz
          tar -xzf rio-0.2.11.tar.gz

      - name: Patch sugarloaf for font fallback
        run: |
          cd ~/rio-build/rio-0.2.11
          # Patch font fallback in methods with self
          sed -i 's/\.unwrap()/\.unwrap_or_else(|_| { eprintln!("Font not found, using DejaVu Sans Mono"); FontData::from_slice(FONT_DEJAVU_SANS_MONO, false).expect("Fallback font missing") })/' sugarloaf/src/font/mod.rs || true
          # Skip tabs patch for now until we confirm location
          echo "Applied font fallback patch to sugarloaf/src/font/mod.rs"

      - name: Build Rio Terminal
        run: |
          cd ~/rio-build/rio-0.2.11
          cargo build --release

      - name: Install Rio to staging directory
        run: |
          mkdir -p ~/rio-install/usr/bin
          cp ~/rio-build/rio-0.2.11/target/release/rio ~/rio-install/usr/bin/rio-bin

      - name: Bundle all shared library dependencies
        run: |
          cd ~/rio-install
          mkdir -p usr/lib
          chmod +w usr/bin/rio-bin
          echo "Listing libraries required by rio:"
          ldd usr/bin/rio-bin
          ldd usr/bin/rio-bin | grep -o '/[^ ]*\.so[^ ]*' | sort -u | while read lib; do
            echo "Copying $lib"
            cp -v "$lib" usr/lib/ || { echo "Error: Failed to copy $lib"; exit 1; }
          done
          cp -v /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 usr/lib/ || { echo "Error: Failed to copy libfontconfig"; exit 1; }
          cp -v /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 usr/lib/ || { echo "Error: Failed to copy linker"; exit 1; }
          echo "Final library list in usr/lib:"
          ls -l usr/lib/

      - name: Bundle font files and fontconfig config
        run: |
          mkdir -p ~/rio-install/usr/share/fonts/truetype/dejavu
          cp -v /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf ~/rio-install/usr/share/fonts/truetype/dejavu/
          mkdir -p ~/rio-install/usr/share/fontconfig/conf
          cat > ~/rio-install/usr/share/fontconfig/conf/fonts.conf << EOF
          <?xml version="1.0"?>
          <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
          <fontconfig>
            <dir prefix="cwd">../fonts</dir>
            <cachedir prefix="cwd">../cache</cachedir>
          </fontconfig>
          EOF
          mkdir -p ~/rio-install/usr/share/fontconfig/cache
          export FONTCONFIG_FILE=~/rio-install/usr/share/fontconfig/conf/fonts.conf
          fc-cache -fv ~/rio-install/usr/share/fonts

      - name: Ensure RPATH with patchelf
        run: |
          patchelf --force-rpath --set-rpath \$ORIGIN/../lib ~/rio-install/usr/bin/rio-bin

      - name: Create configuration file with font specification
        run: |
          mkdir -p ~/rio-install/usr/config
          cat > ~/rio-install/usr/config/config.toml << EOF
          use-fork = false
          [fonts]
          regular = { family = "DejaVu Sans Mono", style = "Normal" }
          [colors]
          background = "#000000"
          foreground = "#00FFFF"
          cursor = "#00FF00"
          tabs = "#000000"
          tabs-active = "#00FF00"
          selection-foreground = "#00FFFF"
          selection-background = "#000000"
          black = "#000000"
          EOF
          chmod 644 ~/rio-install/usr/config/config.toml
          cat ~/rio-install/usr/config/config.toml

      - name: Create launcher script
        run: |
          cd ~/rio-install/usr/bin
          cat > rio << EOF
          #!/bin/bash
          DIR="\$(dirname "\$(realpath "\$0")")"
          export FONTCONFIG_FILE="\$DIR/../share/fontconfig/conf/fonts.conf"
          mkdir -p ~/.config/rio
          cp "\$DIR/../config/config.toml" ~/.config/rio/config.toml
          "\$DIR/../lib/ld-linux-x86-64.so.2" --library-path "\$DIR/../lib" "\$DIR/rio-bin" "\$@"
          EOF
          chmod +x rio
          cat rio

      - name: Create zip file with binary and libraries
        run: |
          cd ~/rio-install
          zip -r ~/rio-0.2.11-portable.zip .

      - name: Generate SHA256 checksum
        run: |
          sha256sum ~/rio-0.2.11-portable.zip > ~/rio-0.2.11-portable.zip.sha256
          cat ~/rio-0.2.11-portable.zip.sha256

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: rio-portable
          path: |
            ~/rio-0.2.11-portable.zip
            ~/rio-0.2.11-portable.zip.sha256
